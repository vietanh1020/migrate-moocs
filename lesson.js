import dotenv from "dotenv";
import { MongoClient } from "mongodb";
import mysql from "mysql2/promise";

// Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
dotenv.config();

// ƒê·ªçc c·∫•u h√¨nh t·ª´ .env
const {
    MYSQL_HOST,
    MYSQL_USER,
    MYSQL_PASSWORD,
    MYSQL_DATABASE_COURSE,
    MONGO_URL,
    MONGO_DATABASE_COURSE,
    BATCH_SIZE,
    OLD_SITE_ID,
} = process.env;

// K·∫øt n·ªëi MySQL
async function connectMySQL() {
    return mysql.createConnection({
        host: MYSQL_HOST,
        user: MYSQL_USER,
        password: MYSQL_PASSWORD,
        database: MYSQL_DATABASE_COURSE,
    });
}

// L·∫•y d·ªØ li·ªáu theo t·ª´ng batch
async function fetchBatch(sqlConnection, tableName, offset, limit) {
    const query = `
    SELECT * FROM ${tableName} 
    WHERE IdSite = ${parseInt(OLD_SITE_ID)} 
    AND IdParent IS NOT NULL 
    LIMIT ${parseInt(limit)} 
    OFFSET ${parseInt(offset)}
    `;

    const [rows] = await sqlConnection.execute(query);

    console.log(`üü¢ L·∫•y ${rows.length} b·∫£n ghi t·ª´ ${tableName} (Offset: ${offset})`);
    return rows;
}

async function findChapter(records, db) {
    if (records.length === 0) return [];
    const ids = [...new Set(records.map(item => item.oldId))];
    const rows = await db.collection("chapter").find({ oldId: { $in: ids } }).toArray();
    return rows;
}


async function getType(row) {

    if (row.VideoFileType == "Video") return 0;
    if (row.VideoFileType == "Youtube") return 1
    if (row.Name == "File ghi h√¨nh tr·ª±c tuy·∫øn") return 3;
    if (row.Name == "File text") return 4;
    if (row.Name == "Test" && row.ExamType == 'room') return 5;


    // [Description("D·∫°ng Video")] VIDEO = 0,
    // [Description("D·∫°ng Youtube")] YOUTUBE = 1,
    // [Description("D·∫°ng Audio")] AUDIO = 2,
    // [Description("D·∫°ng b√†i gi·∫£ng t∆∞∆°ng t√°c")] INTERACTIVE_LESSON = 3,
    // [Description("D·∫°ng t√†i li·ªáu")] FILE = 4,
    // [Description("D·∫°ng B√†i t·∫≠p/ Ki·ªÉm tra")] TEST = 5,
    // [Description("D·∫°ng ki·ªÉm tra cu·ªëi kho√°")] FINAL_TEST = 6,
}


async function getTypeEnd(row) {
    if (row.VideoFileType == "Video" || row.VideoFileType == "Youtube") return 0;
    if (row.Name == "B√†i ki·ªÉm tra") return 1
    if (row.Name == "Test" && row.ExamType == 'room') return 1;

    return 2
}


async function migrateTable(sqlConnection, mongoDb, tableName) {
    const chapters = await findChapter(rows, mongoDbCourse);
    console.log(`üîÑ ƒêang di chuy·ªÉn b·∫£ng ${tableName}...`);


    let offset = 0;
    while (true) {
        const rows = await fetchBatch(sqlConnection, tableName, offset, BATCH_SIZE);
        const mappedNews = rows.map((row) => {
            const chapter = chapters.find(item => row.ParentId == item.oldId);
            return {
                chapterId: chapter?._id,
                courseId: chapter?.courseId,
                name: row.Name,
                lessonType: getType(row),
                urlLessonType: row.VideoFileUrl,
                uriVideo: row.VideoFileUrl,
                urlFileAttended: JSON.stringify(row.FileUrls),
                fileAttendedName: JSON.stringify(row.FileUrls),
                tag: [],
                status: 1,
                urlAvatar: "",
                description: row.Description || row.Content,
                lessonFinishStatus: getTypeEnd(row),
                percentFinish: 100,
                questions: [], // c√¢u h·ªèi
                score: 0, // t·ªïng ƒëi·ªÉm
                lessonStatus: 1,
                order: row.DisplayOrder,
                testId: null,
                duration: 0,
                thumbnailUrl: row.ThumbnailFileUrl,
                numberQuestionPass: 0, //l√†m ƒë√∫ng bao nh√™u c√¢u
                markPassExam: 0, //ƒëi·ªÉm  pass b√†i
                createAt: row.CreatedDate,
                updateAt: row.ModifiedDate,

                oldId: row.oldId,
                oldIdExam: row.IdExam,
            }
        });

        // Ki·ªÉm tra n·∫øu rows tr·ªëng th√¨ tho√°t kh·ªèi v√≤ng l·∫∑p
        if (!rows || rows.length === 0) break;

        await mongoDb.collection('lesson').insertMany(mappedNews);

        offset += BATCH_SIZE;
    }

    console.log(`üèÅ Ho√†n t·∫•t di chuy·ªÉn b·∫£ng ${tableName}!`);
}

const sqlConnection = await connectMySQL();

// Ch·∫°y qu√° tr√¨nh di chuy·ªÉn
async function migrate() {
    const mongoClient = new MongoClient(MONGO_URL);
    await mongoClient.connect();
    const mongoDb = mongoClient.db(MONGO_DATABASE_COURSE);

    try {
        await migrateTable(sqlConnection, mongoDb, 'CourseLesson');
    } catch (error) {
        console.error("‚ùå L·ªói khi di chuy·ªÉn d·ªØ li·ªáu:", error);
    } finally {
        await sqlConnection.end();
        await mongoClient.close();
        console.log("üîö ƒê√£ ho√†n th√†nh qu√° tr√¨nh di chuy·ªÉn.");
    }
}

migrate();